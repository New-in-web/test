{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","map","robot","i","key","SearchBox","searchfiled","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filtredRobots","filter","e","toLowerCase","includes","length","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wRAeeA,G,YAVF,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,GAAGC,EAAc,EAAdA,KAAKC,EAAS,EAATA,MACtB,OACC,yBAAKC,UAAU,uDACd,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BL,EAA1B,cACpB,4BAAKC,GACL,2BAAIC,MCaQI,EAlBE,SAAC,GAAc,IAAZC,EAAW,EAAXA,OAEnB,OACC,6BACEA,EAAOC,KAAI,SAACC,EAAMC,GAGhB,OAAQ,kBAAC,EAAD,CACLC,IAAKF,EAAMT,GACXA,GAAIS,EAAMT,GACVC,KAAMQ,EAAMR,KACZC,MAAOO,EAAMP,aCDPU,EAbG,SAAC,GAA+B,EAA7BC,YAA8B,IAAjBC,EAAgB,EAAhBA,aAEjC,OACC,yBAAKX,UAAU,OACd,2BACCA,UAAU,mCACVY,KAAK,SAASC,YAAY,gBAC1BC,SAAYH,MCCDI,EARA,SAACC,GACf,OACC,yBAAKC,MAAO,CAACC,UAAY,SAAUC,OAAS,kBAAmBC,OAAS,UACtEJ,EAAMK,SADR,MC+CaC,G,wDA1Cd,aAAc,IAAD,8BACZ,gBAYDC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAACf,YAAcc,EAAME,OAAOC,SAZ1C,EAAKC,MAAQ,CACZxB,OAAS,GACTM,YAAc,IAJH,E,gEAOO,IAAD,OAClBmB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAM,SAAAG,GAAK,OAAE,EAAKR,SAAS,CAACrB,OAAS6B,S,+BAQtC,IAAD,EAC8BC,KAAKN,MAA3BxB,EADR,EACQA,OAAOM,EADf,EACeA,YACRyB,EAAiB/B,EAAQgC,QAAO,SAAAC,GAAC,OAAEA,EAAEvC,KAAKwC,cAAcC,SAAS7B,EAAY4B,kBAEnF,OAAKlC,EAAOoC,OAKV,yBAAKxC,UAAU,MACd,wBAAIA,UAAU,MAAd,gBAEA,kBAAC,EAAD,CAAWW,aAAcuB,KAAKX,iBAE9B,kBAAC,EAAD,CAAQnB,OAAQ+B,GAEf,kBAAC,EAAD,CAAU/B,OAAQ+B,MAXd,wBAAInC,UAAU,MAAd,e,GAzBQyC,IAAMC,YCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAGFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.49839b69.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'tachyons';\r\nimport './Card.css'\r\n\r\n\r\nconst Card = ({id,name,email})=>{\r\n\treturn (\r\n\t\t<div className='bg-light-green tc dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robot' src={`https://robohash.org/${id}?200x200`} />\r\n\t\t\t<h2>{name}</h2>\r\n\t\t\t<p>{email}</p>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\n\r\nconst CardList = ({ robots })=>{\r\n\t//we return a virtual DOM = HTML which contains js\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{robots.map((robot,i)=>\r\n\t\t\t\t{\r\n\r\n\t\t\t\t\t return (<Card \r\n\t\t\t\t\t \t\t\tkey={robot.id} \r\n\t\t\t\t\t \t\t\tid={robot.id} \r\n\t\t\t\t\t \t\t\tname={robot.name} \r\n\t\t\t\t\t \t\t\temail={robot.email}\r\n\t\t\t\t\t \t\t/>);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t  \t</div>\r\n\t);\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfiled, searchChange})=>{\r\n\r\n\treturn (\r\n\t\t<div className='pa1'>\r\n\t\t\t<input \r\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\t\t\ttype='search' placeholder='search robots'\r\n\t\t\t\tonChange = {searchChange} \r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props)=>{\r\n\treturn(\r\n\t\t<div style={{overflowY : 'scroll', border : '4px solid black', height : '450px'}}>\r\n\t\t\t{props.children};\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\n\r\nclass App extends React.Component{\r\n//you have to use constructor when you need a state\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots : [] ,\r\n\t\t\tsearchfiled : ''\r\n\t\t}\r\n\t}\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response=>response.json())\r\n\t\t.then( users=>this.setState({robots : users}) );\r\n\t}\t\r\n\r\n\tonSearchChange = (event) =>{\r\n\t\tthis.setState({searchfiled : event.target.value});\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\tconst {robots,searchfiled} = this.state;\r\n\t\tconst filtredRobots = (robots).filter(e=>e.name.toLowerCase().includes(searchfiled.toLowerCase()));\r\n\r\n\t\tif (!robots.length)\r\n\t\t\treturn <h1 className='tc'>LOADING</h1>;\r\n\t\telse{\r\n\r\n\t\t\treturn(\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<h1 className='f1'>RobotFriends</h1>\r\n\t\t\t\t\t{/* it's a child component of App */}\r\n\t\t\t\t\t<SearchBox searchChange={this.onSearchChange} />\r\n\t\t\t\t\t{/* it's a child component of App */}\r\n\t\t\t\t\t<Scroll robots={filtredRobots}>\r\n\t\t\t\t\t\t{/* it's a children of Scroll component */}\r\n\t\t\t\t\t\t<CardList robots={filtredRobots} />\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n  \t\t<App />\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}